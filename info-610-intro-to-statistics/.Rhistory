summary(backward_model)
both_model <- stepAIC(base_model, direction = "both", scope = log_model)
summary(both_model)
## first we have to set up a base model, against which the full  model will be compared
base_model <- glm(prog_j51 ~ 1, data = data, family = "binomial")
## then we can run forward, backward, and/or stepwise selections
forward_model <- stepAIC(base_model, direction = "forward", scope = log_model)
summary(forward_model)
backward_model <- stepAIC(base_model, direction = "backward", scope = log_model)
summary(backward_model)
both_model <- stepAIC(base_model, direction = "both", scope = log_model)
summary(both_model)
# Q2: define and interpret a logistic model
## define the model
log_model <- glm(prog_inclus_hous ~ year_built + res_units + net_inc_sqft + assessed_value_perunit,
data = data, family = "binomial")
## print the results
summary(log_model)
## convert coefficients and confidence intervals to odds-ratio terms
exp(coefficients(log_model))
exp(confint.default(log_model))
## Interpret analysis of deviance table
anova(log_model, "Chisquare")
## first we have to set up a base model, against which the full  model will be compared
base_model <- glm(prog_j51 ~ 1, data = data, family = "binomial")
## first we have to set up a base model, against which the full  model will be compared
base_model <- glm(prog_inclus_hous ~ 1, data = data, family = "binomial")
## then we can run forward, backward, and/or stepwise selections
forward_model <- stepAIC(base_model, direction = "forward", scope = log_model)
summary(forward_model)
backward_model <- stepAIC(base_model, direction = "backward", scope = log_model)
summary(backward_model)
both_model <- stepAIC(base_model, direction = "both", scope = log_model)
summary(both_model)
ggplot(data = summary_421a,
aes(x=prog_421a, assessed_value_mean_perunit)) +
geom_bar(stat = "identity") +
labs(
title = "421a "
)
ggplot(data = summary_421a,
aes(x=prog_421a, assessed_value_perunit_mean)) +
geom_bar(stat = "identity") +
labs(
title = "421a "
)
plot(data$prog_421a, data$assessed_value_perunit)
barplot(data$prog_421a, data$assessed_value_perunit)
barplot(data$prog_421a, mean(data$assessed_value_perunit)
barplot(data$prog_421a, mean(data$assessed_value_perunit))
# load data
## for this, we'll use the most recent URL to load Furman Center's Subsidized Housing Database
url <- "https://furmancenter.org/files/CoreData/FC_SHD_bbl_analysis_2025-05-13.csv"
data <- read.csv(url)
## add one new variable
data$assessed_value_perunit <- data$assessed_value / data$res_units
## basic data visualizations
plot(assessed_value_perunit, prog_421a)
## basic data visualizations
plot(data$assessed_value_perunit, data$prog_421a)
## basic data visualizations
boxplot(prog_j51 ~ year_built, data = data)
## basic data visualizations
boxplot(year_built ~ prog_j51, data = data)
## basic data visualizations
boxplot(forumula = year_built ~ prog_j51,
data = data,
xlab = "J51 Building"
)
## basic data visualizations
boxplot(year_built ~ prog_j51,
data = data,
xlab = "J51 Building"
)
## basic data visualizations
boxplot(year_built ~ prog_j51,
data = data,
xlab = "J51 Building",
ylab = "Year Built"
)
boxplot(res_units ~ prog_j51,
data = data,
xlab = "J51 Building",
ylab = "Year Built")
boxplot(res_units ~ prog_j51,
data = data,
xlab = "J51 Building",
ylab = "Residential Units")
boxplot(net_inc_sqft ~ prog_j51,
data = data,
xlab = "J51 Building",
ylab = "Net Rental Income (per sq. ft.)")
boxplot(assessed_value_perunit ~ prog_j51,
data = data,
xlab = "J51 Building",
ylab = "Assessed Value ($ per unit)")
## testing correlations
cor.test(data$prog_j51, data$year_buitl, method = "spearman")
## testing correlations
cor.test(data$prog_j51, data$year_buitl, method = "kendall")
## testing correlations
cor.test(data$prog_j51, data$year_built, method = "kendall")
## testing correlations
cor.test(data$prog_j51, data$year_built, method = "spearman")
## testing correlations
cor.test(data$prog_j51, data$year_built, method = "kendall")
cor.test(data$prog_j51, data$res_units, method = "kendall")
cor.test(data$prog_j51, data$assessed_value_perunit, method = "kendall")
cor.test(data$prog_j51, data$net_inc_sqft, method = "kendall")
## now just for fun, a map...
options(viewer = NULL)
map <- leaflet()
map <- addTiles(map)
map <- addProviderTiles(map, "Stadia.StamenToner")
cols <- c("green", "gray")
View(data)
ls(data)
map <- addCircleMarkers(map,
lng = data$longitude,
lat = data$latitude,
radius = 2.5,
color = cols[data$prog_j51],
)
map
map <- addCircleMarkers(map,
lng = data$longitude,
lat = data$latitude,
radius = 2.5,
color = cols[data$prog_j51 + 1],
)
map <- addLegend(map,
"topright",
colors = cols,
labels = c("Good", "Fair/Poor"),
title = "Tree Health",
opacity = 1
)
map
cols <- c("gray", "blue")
map <- addCircleMarkers(map,
lng = data$longitude,
lat = data$latitude,
radius = 2.5,
color = cols[data$prog_j51 + 1],
)
map <- addLegend(map,
"topright",
colors = cols,
labels = c("Good", "Fair/Poor"),
title = "Tree Health",
opacity = 1
)
map
rm(map)
map <- addCircleMarkers(map,
lng = data$longitude,
lat = data$latitude,
radius = cols[data$res_units],
color = cols[data$prog_j51 + 1],
)
map <- addCircleMarkers(map,
lng = data$longitude,
lat = data$latitude,
radius = cols[data$res_units],
color = cols[data$prog_j51 + 1],
)
map <- addLegend(map,
"topright",
colors = cols,
labels = c("Other", "J51"),
title = "Buildings with Residential Subsidies",
opacity = 1
)
map
## now just for fun, a map...
options(viewer = NULL)
map <- leaflet()
map <- addTiles(map)
map <- addProviderTiles(map, "Stadia.StamenToner")
cols <- c("gray", "blue")
map <- addCircleMarkers(map,
lng = data$longitude,
lat = data$latitude,
radius = cols[data$res_units],
color = cols[data$prog_j51 + 1],
)
map <- addLegend(map,
"topright",
colors = cols,
labels = c("Other", "J51"),
title = "Buildings with Residential Subsidies",
opacity = 1
)
map
data <- read.csv(url) %>%
filter(prog_j51 == 1 | prog_421a == 1)
## add one new variable
data$assessed_value_perunit <- data$assessed_value / data$res_units
## basic data visualizations
boxplot(year_built ~ prog_j51,
data = data,
xlab = "J51 Building",
ylab = "Year Built")
boxplot(res_units ~ prog_j51,
data = data,
xlab = "J51 Building",
ylab = "Residential Units")
boxplot(assessed_value_perunit ~ prog_j51,
data = data,
xlab = "J51 Building",
ylab = "Assessed Value ($ per unit)")
boxplot(net_inc_sqft ~ prog_j51,
data = data,
xlab = "J51 Building",
ylab = "Net Rental Income ($ per sq.ft.)")
## testing correlations
cor.test(data$prog_j51, data$year_built, method = "kendall")
## now just for fun, a map...
options(viewer = NULL)
map <- leaflet()
map <- addTiles(map)
map <- addProviderTiles(map, "Stadia.StamenToner")
cols <- c("gray", "blue")
map <- addCircleMarkers(map,
lng = data$longitude,
lat = data$latitude,
radius = cols[data$res_units],
color = cols[data$prog_j51 + 1],
)
map <- addLegend(map,
"topright",
colors = cols,
labels = c("Other", "J51"),
title = "Buildings with Residential Subsidies",
opacity = 1
)
map
# Q2: define and interpret a logistic model
## define the model
log_model <- glm(prog_421a ~ year_built + res_units + net_inc_sqft + assessed_value_perunit,
data = data, family = "binomial")
## print the results
summary(log_model)
## convert coefficients and confidence intervals to odds-ratio terms
exp(coefficients(log_model))
exp(confint.default(log_model))
## Interpret analysis of deviance table
anova(log_model, "Chisquare")
## first we have to set up a base model, against which the full  model will be compared
base_model <- glm(prog_inclus_hous ~ 1, data = data, family = "binomial")
## then we can run forward, backward, and/or stepwise selections
forward_model <- stepAIC(base_model, direction = "forward", scope = log_model)
summary(forward_model)
backward_model <- stepAIC(base_model, direction = "backward", scope = log_model)
summary(backward_model)
both_model <- stepAIC(base_model, direction = "both", scope = log_model)
summary(both_model)
## basic data visualizations
boxplot(year_built ~ prog_421a,
data = data,
xlab = "J51 Building",
ylab = "Year Built")
boxplot(res_units ~ prog_421a,
data = data,
xlab = "421a Building",
ylab = "Residential Units")
boxplot(assessed_value_perunit ~ prog_421a,
data = data,
xlab = "421a Building",
ylab = "Assessed Value ($ per unit)")
boxplot(net_inc_sqft ~ prog_421a,
data = data,
xlab = "421a Building",
ylab = "Net Rental Income ($ per sq.ft.)")
## testing correlations
cor.test(data$prog_421a, data$year_built, method = "kendall")
cor.test(data$prog_421a, data$res_units, method = "kendall")
cor.test(data$prog_421a, data$assessed_value_perunit, method = "kendall")
cor.test(data$prog_421a, data$net_inc_sqft, method = "kendall")
## now just for fun, a map...
options(viewer = NULL)
map <- leaflet()
map <- addTiles(map)
map <- addProviderTiles(map, "Stadia.StamenToner")
cols <- c("gray", "blue")
map <- addCircleMarkers(map,
lng = data$longitude,
lat = data$latitude,
radius = cols[data$res_units],
color = cols[data$prog_421a + 1],
)
map <- addLegend(map,
"topright",
colors = cols,
labels = c("j51", "421a"),
title = "Construction-Related Subsidies",
opacity = 1
)
map
map <- addCircleMarkers(map,
lng = data$longitude,
lat = data$latitude,
radius = cols[data$res_units],
color = cols[data$prog_421a],
)
map <- addLegend(map,
"topright",
colors = cols,
labels = c("J51", "421a"),
title = "Construction-Related Subsidies",
opacity = 1
)
map
rm(map)
## now just for fun, a map...
options(viewer = NULL)
map <- leaflet()
map <- addTiles(map)
map <- addProviderTiles(map, "Stadia.StamenToner")
cols <- c("gray", "blue")
map <- addCircleMarkers(map,
lng = data$longitude,
lat = data$latitude,
radius = cols[data$res_units],
color = cols[data$prog_421a],
)
map <- addLegend(map,
"topright",
colors = cols,
labels = c("J51", "421a"),
title = "Construction-Related Subsidies",
opacity = 1
)
map
map <- addCircleMarkers(map,
lng = data$longitude,
lat = data$latitude,
radius = cols[data$res_units],
color = cols[data$prog_421a + 1],
)
map <- addLegend(map,
"topright",
colors = cols,
labels = c("J51", "421a"),
title = "Construction-Related Subsidies",
opacity = 1
)
map
map <- addCircleMarkers(map,
lng = data$longitude,
lat = data$latitude,
radius = 1.5,
color = cols[data$prog_421a + 1],
)
map <- addLegend(map,
"topright",
colors = cols,
labels = c("J51", "421a"),
title = "Construction-Related Subsidies",
opacity = 1
)
map
View(data)
rm(map)
## now just for fun, a map...
options(viewer = NULL)
map <- leaflet()
map <- addTiles(map)
map <- addProviderTiles(map, "Stadia.StamenToner")
cols <- c("blue", "gray")
map <- addCircleMarkers(map,
lng = data$longitude,
lat = data$latitude,
radius = 1.5,
color = cols[data$prog_421a + 1],
)
map <- addLegend(map,
"topright",
colors = cols,
labels = c("421a", "J51"),
title = "Construction-Related Subsidies",
opacity = 1
)
map
## first we have to set up a base model, against which the full  model will be compared
base_model <- glm(prog_421a ~ 1, data = data, family = "binomial")
## then we can run forward, backward, and/or stepwise selections
forward_model <- stepAIC(base_model, direction = "forward", scope = log_model)
summary(forward_model)
backward_model <- stepAIC(base_model, direction = "backward", scope = log_model)
summary(backward_model)
both_model <- stepAIC(base_model, direction = "both", scope = log_model)
summary(both_model)
## print the results
summary(log_model)
both_model <- stepAIC(base_model, direction = "both", scope = log_model, k = log(n))
both_model <- stepAIC(base_model, direction = "both", scope = log_model, k = log(7983))
summary(both_model)
## basic data visualizations
barplot(data$year_built, data$prog_421a)
# Q2: define and interpret a logistic model with only one variable at a time
variables <- c("year_built", "res_units", "net_inc_sqft", "assessed_value_perunit")
# Q2: define and interpret a logistic model with only one variable at a time
## define my predictors
predictors <- c("year_built", "res_units", "net_inc_sqft", "assessed_value_perunit")
## write a loop to test each predictor
for (variable in predictors){
## built the formula
formula <- as.formula(paste("prog_421a ~", variable))
## fit the model
model <- glm(formula, data = data, family = "binomial")
## print results
### model summary
cat("\n\n--- Model for predictor:", var, "---\n")
print(summary(model))
### odds ratios
cat("\nCoefficients (in Odds):\n")
print(exp(coef(log_model)))
### confidence intervals
cat("\nConfidence Intervals (in Odds):\n")
print(exp(confint.default(log_model)))
# analysis of deviance
cat("\nAnalysis of Deviance:\n")
print(anova(log_model, test = "Chisq"))
}
## print results
### model summary
cat("\n\n--- Model for predictor:", variable, "---\n")
## write a loop to test each predictor
for (variable in predictors){
## built the formula
formula <- as.formula(paste("prog_421a ~", variable))
## fit the model
model <- glm(formula, data = data, family = "binomial")
## print results
### model summary
cat("\n\n--- Model for predictor:", variable, "---\n")
print(summary(model))
### odds ratios
cat("\nCoefficients (in Odds):\n")
print(exp(coef(log_model)))
### confidence intervals
cat("\nConfidence Intervals (in Odds):\n")
print(exp(confint.default(log_model)))
# analysis of deviance
cat("\nAnalysis of Deviance:\n")
print(anova(log_model, test = "Chisq"))
}
## write a loop to test each predictor
for (variable in predictors){
## built the formula
formula <- as.formula(paste("prog_421a ~", variable))
## fit the model
model <- glm(formula, data = data, family = "binomial")
## print results
### model summary
cat("\n\n--- Model for predictor:", variable, "---\n")
print(summary(model))
### odds ratios
cat("\nCoefficients (in Odds):\n")
print(exp(coef(model)))
### confidence intervals
cat("\nConfidence Intervals (in Odds):\n")
print(exp(confint.default(model)))
# analysis of deviance
cat("\nAnalysis of Deviance:\n")
print(anova(model, test = "Chisq"))
}
## print results
### model summary
cat("\n\n Model for predictor:", variable, "\n")
## write a loop to test each predictor
for (variable in predictors){
## built the formula
formula <- as.formula(paste("prog_421a ~", variable))
## fit the model
model <- glm(formula, data = data, family = "binomial")
## print results
### model summary
cat("\n\n Model for predictor:", variable, "\n")
print(summary(model))
### odds ratios
cat("\nCoefficients (in Odds):\n")
print(exp(coef(model)))
### confidence intervals
cat("\nConfidence Intervals (in Odds):\n")
print(exp(confint.default(model)))
# analysis of deviance
print(anova(model, test = "Chisq"))
}
## define the model
log_model <- glm(prog_421a ~ year_built + res_units + net_inc_sqft + assessed_value_perunit,
data = data, family = "binomial")
## write a loop to test each predictor
for (variable in predictors){
## built the formula
formula <- as.formula(paste("prog_421a ~", variable))
## fit the model
model <- glm(formula, data = data, family = "binomial")
## print results
### model summary
cat("\n\n Model for predictor:", variable, "\n")
print(summary(model))
### odds ratios
cat("\nCoefficients (in Odds):\n")
print(exp(coef(model)))
### confidence intervals
cat("\nConfidence Intervals (in Odds):\n")
print(exp(confint.default(model)))
# analysis of deviance
print(anova(model, test = "Chisq"))
}
